test_0: self.assertEqual("Watashi.eIGHt8OKe", Strongest_Extension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']))
test_1: self.assertEqual("Boku123.YEs.WeCaNe", Strongest_Extension('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']))
test_2: self.assertEqual("__YESIMHERE.NuLl__", Strongest_Extension('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']))
test_3: self.assertEqual("K.TAR", Strongest_Extension('K', ['Ta', 'TAR', 't234An', 'cosSo']))
test_4: self.assertEqual("__HAHA.123", Strongest_Extension('__HAHA', ['Tab', '123', '781345', '-_-']))
test_5: self.assertEqual("YameRore.okIWILL123", Strongest_Extension('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']))
test_6: self.assertEqual("finNNalLLly.WoW", Strongest_Extension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']))
test_7: self.assertEqual("_.Bb", Strongest_Extension('_', ['Bb', '91245']))
test_8: self.assertEqual("Sp.671235", Strongest_Extension('Sp', ['671235', 'Bb']))
test_9: self.assertEqual("Test3.TWoUPPERcaseletTErs", Strongest_Extension('Test3', ['oneUPPERcaseletter', 'TWoUPPERcaseletTErs', 'threeUppercaseletters', 'fourlowercaseletters']))
test_10: self.assertEqual("Test2.capitalLETTERS", Strongest_Extension('Test2', ['capitalLETTERS', 'lowercaseletters', 'mIxEdcAsE']))
test_11: self.assertEqual("Test4.12345", Strongest_Extension('Test4', ['ALLUPPERcaseletters', 'ALLlowercaseletters', 'Nolettersatall123', '12345']))
test_12: self.assertEqual("My_class.HHHHHH", Strongest_Extension('My_class', ['Aaa', 'ZZZZ', 'HHHMeyOneMoreClassClass', 'ddd', 'E', 'HHHHHH', 'E', 'ZZZZ']))
test_13: self.assertEqual("SampleClass.aBc", Strongest_Extension('SampleClass', ['aBc', 'dEf', 'Ghi']))
test_14: self.assertEqual("ThisIsTheClassName.ThisIsTheExtension", Strongest_Extension('ThisIsTheClassName', ['ThisIsTheExtension']))
test_15: self.assertEqual("MYCLASS.ASDFGHJKL", Strongest_Extension('MYCLASS', ['qwerty', 'asdfgh', 'zxcvbn', 'QWERTY', 'MYCLASS', 'ASDFGHJKL', 'ZXCVBNM']))
test_16: self.assertEqual("Animal.CAMel", Strongest_Extension('Animal', ['CAMel', 'hOrSE', 'DoG']))
