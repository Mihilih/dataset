test_0: self.assertEqual(['little'], select_words('Mary had a little lamb', 4))
test_1: self.assertEqual(['little'], select_words('Mary had a little lamb', 4))
test_2: self.assertEqual(['Mary', 'lamb'], select_words('Mary had a little lamb', 3))
test_3: self.assertEqual(['Mary', 'lamb'], select_words('Mary had a little lamb', 3))
test_4: self.assertEqual([], select_words('simple white space', 2))
test_5: self.assertEqual([], select_words('simple white space', 2))
test_6: self.assertEqual(['world'], select_words('Hello world', 4))
test_7: self.assertEqual(['world'], select_words('Hello world', 4))
test_8: self.assertEqual(['Uncle'], select_words('Uncle sam', 3))
test_9: self.assertEqual(['Uncle'], select_words('Uncle sam', 3))
test_10: self.assertEqual([], select_words('', 4))
test_11: self.assertEqual([], select_words('', 4))
test_12: self.assertEqual(['b', 'c', 'd', 'f'], select_words('a b c d e f', 1))
test_13: self.assertEqual(['b', 'c', 'd', 'f'], select_words('a b c d e f', 1))
test_14: self.assertEqual(['og'], select_words('the quick brown fox jumps  og', 1))
test_15: self.assertEqual([], select_words('', 1))
test_16: self.assertEqual(['a', 'a', 'a', 'a', 'a'], select_words('Python isp a popular programminPython isp a populathis is a test string with multiplePython isp a popular program ming language words containing different numbers of consonants programming  languagePython is a popular progrmming languageg language', 0))
test_17: self.assertEqual(['program', 'languageeR'], select_words('ThE qUiCk BrOwN fOx JuMpS oVPython isp a popular program ming languageeR tHe LaZy DoG', 5))
test_18: self.assertEqual(['apple', 'banana'], select_words('apple banana cherry', 3))
